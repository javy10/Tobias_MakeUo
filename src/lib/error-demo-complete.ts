// src/lib/error-demo-complete.ts
// DemostraciÃ³n completa del sistema de interceptaciÃ³n de errores

import { showErrorAlert } from './error-alerts';
import { testErrorInterceptor } from './global-error-interceptor';

// FunciÃ³n para demostrar todos los tipos de errores
export function demonstrateAllErrorTypes() {
  console.log('ðŸ§ª Iniciando demostraciÃ³n de errores...');
  
  // 1. Error de JavaScript
  setTimeout(() => {
    console.log('1. Simulando error de JavaScript...');
    throw new Error('Error de prueba - JavaScript');
  }, 1000);
  
  // 2. Error de Promise
  setTimeout(() => {
    console.log('2. Simulando error de Promise...');
    Promise.reject(new Error('Error de prueba - Promise'));
  }, 2000);
  
  // 3. Error de red (fetch)
  setTimeout(() => {
    console.log('3. Simulando error de red...');
    fetch('/api/nonexistent').catch(() => {});
  }, 3000);
  
  // 4. Error de Supabase
  setTimeout(() => {
    console.log('4. Simulando error de Supabase...');
    const supabaseError = {
      message: "Failed to fetch",
      code: "NETWORK_ERROR",
      details: "Connection timeout after 30 seconds"
    };
    showErrorAlert({
      title: 'Error de Base de Datos',
      message: 'No se pudo conectar con Supabase.',
      solution: `
        1. Verifica tu conexiÃ³n a internet
        2. Revisa las credenciales en el archivo .env.local
        3. Confirma que el proyecto de Supabase estÃ© activo
        4. Verifica que las tablas existan en tu base de datos
        5. Si el problema persiste, contacta al administrador del sistema
      `,
      error: supabaseError
    });
  }, 4000);
  
  // 5. Error de validaciÃ³n
  setTimeout(() => {
    console.log('5. Simulando error de validaciÃ³n...');
    showErrorAlert({
      title: 'Error de ValidaciÃ³n',
      message: 'El campo "email" no es vÃ¡lido.',
      solution: `
        1. Revisa que el campo estÃ© completo
        2. Verifica que el formato sea correcto
        3. Comprueba que cumpla con los requisitos
        4. Intenta completar el formulario nuevamente
      `,
      error: { field: 'email', value: 'invalid-email' }
    });
  }, 5000);
  
  // 6. Error de archivo
  setTimeout(() => {
    console.log('6. Simulando error de archivo...');
    showErrorAlert({
      title: 'Error de Archivo',
      message: 'No se pudo subir el archivo.',
      solution: `
        1. Verifica que el archivo no estÃ© corrupto
        2. Comprueba que el tamaÃ±o del archivo sea vÃ¡lido
        3. AsegÃºrate de que el formato del archivo sea soportado
        4. Intenta subir el archivo nuevamente
      `,
      error: { fileName: 'documento.pdf', size: '15MB' }
    });
  }, 6000);
  
  // 7. Error de autenticaciÃ³n
  setTimeout(() => {
    console.log('7. Simulando error de autenticaciÃ³n...');
    showErrorAlert({
      title: 'Error de AutenticaciÃ³n',
      message: 'Credenciales invÃ¡lidas.',
      solution: `
        1. Verifica que las credenciales sean correctas
        2. Revisa la configuraciÃ³n de permisos
        3. Intenta cerrar sesiÃ³n y volver a iniciar sesiÃ³n
        4. Verifica que el usuario tenga permisos adecuados
        5. Contacta al administrador si el problema persiste
      `,
      error: { code: 'INVALID_CREDENTIALS' }
    });
  }, 7000);
  
  // 8. Error genÃ©rico
  setTimeout(() => {
    console.log('8. Simulando error genÃ©rico...');
    showErrorAlert({
      title: 'Error de AplicaciÃ³n',
      message: 'Se ha producido un error inesperado.',
      solution: `
        1. Recarga la pÃ¡gina para intentar solucionarlo
        2. Verifica tu conexiÃ³n a internet
        3. Guarda tu trabajo antes de recargar
        4. Si el problema persiste, contacta al soporte tÃ©cnico
        5. Proporciona los detalles del error al soporte
      `,
      error: { message: 'Error inesperado', code: 'UNKNOWN' }
    });
  }, 8000);
}

// FunciÃ³n para probar el interceptor global
export function testGlobalInterceptor() {
  console.log('ðŸ§ª Probando interceptor global...');
  testErrorInterceptor();
}

// FunciÃ³n para simular errores en tiempo real
export function simulateRealTimeErrors() {
  console.log('ðŸ§ª Simulando errores en tiempo real...');
  
  // Simular error cada 5 segundos
  const interval = setInterval(() => {
    const errorTypes = [
      'JavaScript',
      'Promise',
      'Network',
      'Supabase',
      'Validation',
      'File',
      'Auth',
      'Generic'
    ];
    
    const randomType = errorTypes[Math.floor(Math.random() * errorTypes.length)];
    const error = new Error(`Error de prueba - ${randomType}`);
    
    console.log(`Simulando error: ${randomType}`);
    throw error;
  }, 5000);
  
  // Detener despuÃ©s de 30 segundos
  setTimeout(() => {
    clearInterval(interval);
    console.log('âœ… DemostraciÃ³n de errores completada');
  }, 30000);
}

// FunciÃ³n para mostrar estadÃ­sticas de errores
export function showErrorStatistics() {
  console.log('ðŸ“Š EstadÃ­sticas del sistema de errores:');
  console.log('- Interceptor global: âœ… Activo');
  console.log('- SweetAlert: âœ… Configurado');
  console.log('- CategorizaciÃ³n: âœ… Implementada');
  console.log('- Soluciones: âœ… Incluidas');
  console.log('- Logging: âœ… Mantenido para debugging');
}

